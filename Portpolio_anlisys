{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/eyeofsea/aSSIST-AIMBA-8th/blob/main/Colaboratory%EC%97%90_%EC%98%A4%EC%8B%A0_%EA%B2%83%EC%9D%84_%ED%99%98%EC%98%81%ED%95%A9%EB%8B%88%EB%8B%A4.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "import yfinance as yf\n",
        "from scipy.optimize import minimize\n",
        "\n",
        "# 주식 데이터 가져오기\n",
        "stocks = {'SK텔레콤': '017670.KS', 'NAVER': '035420.KS', 'LG전자': '066570.KS'}\n",
        "start_date = '2020-01-01'\n",
        "end_date = '2023-12-31'\n",
        "data = yf.download(list(stocks.values()), start=start_date, end=end_date)['Adj Close']\n",
        "data.columns = stocks.keys()\n",
        "\n",
        "# 일간 수익률 계산\n",
        "returns = data.pct_change().dropna()\n",
        "\n",
        "# 연간 수익률과 변동성 계산\n",
        "annual_returns = returns.mean() * 252\n",
        "annual_volatility = returns.std() * np.sqrt(252)\n",
        "\n",
        "# 상관관계 계산\n",
        "correlation = returns.corr()\n",
        "\n",
        "# 공분산 계산\n",
        "covariance = returns.cov() * 252\n",
        "\n",
        "# 무위험 이자율 설정\n",
        "risk_free_rate = 0.03498  # 3.498%\n",
        "\n",
        "# 샤프 비율 계산 (무위험 수익률 적용)\n",
        "sharpe_ratio = (annual_returns - risk_free_rate) / annual_volatility\n",
        "\n",
        "# 포트폴리오 성과 계산 함수\n",
        "def portfolio_performance(weights, returns):\n",
        "    portfolio_return = np.sum(returns.mean() * weights) * 252\n",
        "    portfolio_volatility = np.sqrt(np.dot(weights.T, np.dot(returns.cov() * 252, weights)))\n",
        "    return portfolio_return, portfolio_volatility, (portfolio_return - risk_free_rate) / portfolio_volatility\n",
        "\n",
        "# 최적의 포트폴리오 찾기\n",
        "def optimize_portfolio(returns):\n",
        "    num_assets = len(returns.columns)\n",
        "    constraints = ({'type': 'eq', 'fun': lambda x: np.sum(x) - 1})\n",
        "    bound = (0.0, 1.0)\n",
        "    bounds = tuple(bound for asset in range(num_assets))\n",
        "\n",
        "    result = minimize(\n",
        "        lambda weights: -portfolio_performance(weights, returns)[2],\n",
        "        num_assets * [1./num_assets,],\n",
        "        method='SLSQP',\n",
        "        bounds=bounds,\n",
        "        constraints=constraints\n",
        "    )\n",
        "    return result\n",
        "\n",
        "# 최적 포트폴리오 계산\n",
        "optimal_weights = optimize_portfolio(returns).x\n",
        "\n",
        "# 결과 출력\n",
        "print(\"연간 수익률:\")\n",
        "print(annual_returns)\n",
        "print(\"\\n연간 변동성:\")\n",
        "print(annual_volatility)\n",
        "print(\"\\n상관관계:\")\n",
        "print(correlation)\n",
        "print(\"\\n샤프 비율:\")\n",
        "print(sharpe_ratio)\n",
        "print(\"\\n최적 포트폴리오 비중:\")\n",
        "for i, stock in enumerate(stocks.keys()):\n",
        "    print(f\"{stock}: {optimal_weights[i]:.4f}\")\n",
        "\n",
        "optimal_return, optimal_volatility, optimal_sharpe = portfolio_performance(optimal_weights, returns)\n",
        "print(f\"\\n최적 포트폴리오 성과:\")\n",
        "print(f\"연간 수익률: {optimal_return:.4f}\")\n",
        "print(f\"연간 변동성: {optimal_volatility:.4f}\")\n",
        "print(f\"샤프 비율: {optimal_sharpe:.4f}\")\n",
        "\n",
        "# 1000만원 투자 시 각 주식 구매 금액\n",
        "investment = 10000000\n",
        "print(\"\\n1000만원 투자 시 각 주식 구매 금액:\")\n",
        "for i, stock in enumerate(stocks.keys()):\n",
        "    amount = investment * optimal_weights[i]\n",
        "    print(f\"{stock}: {amount:.0f}원\")"
      ],
      "metadata": {
        "id": "G4vmK070DtIV",
        "outputId": "33c986cf-80ca-464f-8387-f6cec7b13162",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "[*********************100%***********************]  3 of 3 completed"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "연간 수익률:\n",
            "SK텔레콤    0.084284\n",
            "NAVER    0.121780\n",
            "LG전자     0.184809\n",
            "dtype: float64\n",
            "\n",
            "연간 변동성:\n",
            "SK텔레콤    0.259133\n",
            "NAVER    0.364303\n",
            "LG전자     0.417415\n",
            "dtype: float64\n",
            "\n",
            "상관관계:\n",
            "          SK텔레콤     NAVER      LG전자\n",
            "SK텔레콤  1.000000  0.235523  0.254116\n",
            "NAVER  0.235523  1.000000  0.286368\n",
            "LG전자   0.254116  0.286368  1.000000\n",
            "\n",
            "샤프 비율:\n",
            "SK텔레콤    0.190264\n",
            "NAVER    0.238263\n",
            "LG전자     0.358946\n",
            "dtype: float64\n",
            "\n",
            "최적 포트폴리오 비중:\n",
            "SK텔레콤: 0.2274\n",
            "NAVER: 0.2599\n",
            "LG전자: 0.5126\n",
            "\n",
            "최적 포트폴리오 성과:\n",
            "연간 수익률: 0.1456\n",
            "연간 변동성: 0.2808\n",
            "샤프 비율: 0.3938\n",
            "\n",
            "1000만원 투자 시 각 주식 구매 금액:\n",
            "SK텔레콤: 2274439원\n",
            "NAVER: 2599205원\n",
            "LG전자: 5126356원\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "\n"
          ]
        }
      ]
    }
  ],
  "metadata": {
    "colab": {
      "name": "Colaboratory에 오신 것을 환영합니다",
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}
